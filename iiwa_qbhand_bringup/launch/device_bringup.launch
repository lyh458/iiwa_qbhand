<launch>
  <!-- FIXME: cannot pass arguments with 'pass_all_args' flag which are not used in the included launch file. This explode with nested includes. Refer to kinetic 05-04-2018 (wait for fix ros_comm#889: https://github.com/ros/ros_comm/issues/889) -->
  <!-- FIXME: unused args [standalone, use_controller_gui, robot_package, use_waypoints, use_rviz, source_list] -->
  <arg name="standalone" doc="Fake arg: ros_comm#889"/>
  <arg name="use_controller_gui" doc="Fake arg: ros_comm#889"/>
  <arg name="robot_package" doc="Fake arg: ros_comm#889"/>
  <arg name="use_waypoints" doc="Fake arg: ros_comm#889"/>
  <arg name="use_rviz" doc="Fake arg: ros_comm#889"/>
  <arg name="use_interactive_markers" default="Fake arg: ros_comm#889"/>
  <arg name="source_list" doc="Fake arg: ros_comm#889"/>
  <arg name="control_duration" doc="Fake arg: ros_comm#889"/>
  <arg name="robot_hardware" doc="Fake arg: ros_comm#889"/>


  <!-- device info -->
  <arg name="device_id" doc="The ID of the device [1, 128]."/>
  <arg name="device_name" doc="The unique device name used in the yaml controller configurations."/>
  <arg name="device_type" doc="The type of the device [qbhand, qbmove, ...]."/>
  <!-- read/write settings -->
  <arg name="get_currents" default="true" doc="Choose whether or not to retrieve current measurements from the device."/>
  <arg name="get_positions" default="true" doc="Choose whether or not to retrieve position measurements from the device."/>
  <arg name="get_distinct_packages" default="false" doc="Choose whether or not to retrieve current and position measurements from the device in two distinct packages."/>
  <arg name="max_repeats" default="3" doc="The maximum number of consecutive repetitions to mark retrieved data as corrupted."/>
  <arg name="set_commands" default="true" doc="Choose whether or not to send command positions to the device."/>
  <arg name="set_commands_async" default="false" doc="Choose whether or not to send commands without waiting for ack."/>
  <!-- initialization settings -->
  <arg name="activate_on_initialization" default="false" doc="Choose whether or not to activate the motors on node startup."/>
  <arg name="rescan_on_initialization" default="false" doc="Choose whether or not to rescan the serial ports on node startup."/>
  <arg name="use_simulator_mode" default="false" doc="Choose whether or not to use previous command values instead of device measurements."/>
  <!-- optional joint limits -->
  <arg name="has_delta_motor_position_limits" default="false" doc="Choose whether or not to use custom joint limits, e.g. for delta motors."/>
  <arg name="has_gripper_position_limits" default="false" doc="Choose whether or not to use custom joint limits, e.g. for delta motors."/>
  <!-- robot settings -->
  <arg name="robot_name" doc="The unique robot name."/>
  <arg name="robot_namespace" default="$(arg robot_name)" doc="The unique robot namespace."/>

  <group ns="$(arg robot_namespace)">
    <!-- bring up the controllers -->
    <group ns="control">
      <include file="$(find qb_device_bringup)/launch/device_controllers_bringup.launch">
        <!-- FIXME: hardcode, in order to ensure that the joint name `$(arg device_name)_synergy_joint` is same as some files in MoveIt!, -->
        <!-- which use a lot of hardcode (`device_name` is fixed as qbhand, such as qbhand_base_link) -->
        <arg name="device_name" value="qbhand"/>
        <arg name="device_type" value="$(arg device_type)"/>
      </include>
    </group>

    <!-- load parameters -->
    <group ns="$(arg device_name)">
      <!-- device info -->
      <param name="device_id" type="int" value="$(arg device_id)"/>
      <param name="device_name" type="str" value="$(arg device_name)"/>
      <param name="type" type="str" value="qb_hand_hardware_interface/qbHandHW" if="$(eval device_type == 'qbhand')"/>
      <param name="type" type="str" value="qb_move_hardware_interface/qbMoveHW" if="$(eval device_type == 'qbmove')"/>
      <!-- read/write settings -->
      <param name="get_currents" type="bool" value="$(arg get_currents)"/>
      <param name="get_positions" type="bool" value="$(arg get_positions)"/>
      <param name="get_distinct_packages" type="bool" value="$(arg get_distinct_packages)"/>
      <param name="max_repeats" type="int" value="$(arg max_repeats)"/>
      <param name="set_commands" type="bool" value="$(arg set_commands)"/>
      <param name="set_commands_async" type="bool" value="$(arg set_commands_async)"/>
      <!-- initialization settings -->
      <param name="activate_on_initialization" type="bool" value="$(arg activate_on_initialization)"/>
      <param name="rescan_on_initialization" type="bool" value="$(arg rescan_on_initialization)"/>
      <param name="use_simulator_mode" type="bool" value="$(arg use_simulator_mode)"/>

      <!-- optional joint limits -->
      <!-- FIXME: cannot parse directly from yaml with substitution args in kinetic 28-03-2018 (wait for merge ros_comm#1354: https://github.com/ros/ros_comm/pull/1354) -->
      <group if="$(arg has_delta_motor_position_limits)">
        <rosparam subst_value="true">  <!--FIXME: hardcoded-->
          joint_limits:
            $(arg device_name)_shaft_joint:
              has_position_limits: true
              min_position: -1.5
              max_position: 1.0
        </rosparam>
      </group>
      <group if="$(arg has_gripper_position_limits)">
        <rosparam subst_value="true">  <!--FIXME: hardcoded-->
          joint_limits:
            $(arg device_name)_shaft_joint:
              has_position_limits: true
              min_position: 0.0
              max_position: 1.4
        </rosparam>
      </group>
    </group>
  </group>
</launch>